// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qLP7ErC94TEE4dz5dv2X5Z

import * as React from "react";
import { hasVariant, ensureGlobalVariants } from "@plasmicapp/react-web";
import { AntdConfigProvider } from "@plasmicpkgs/antd5/skinny/registerConfigProvider";
import { ChakraProvider } from "@chakra-ui/react";
import { Web3GlobalContext } from "suinova-nft-builder/dist/index.js";

export interface GlobalContextsProviderProps {
  children?: React.ReactElement;
  antdConfigProviderProps?: Partial<
    Omit<React.ComponentProps<typeof AntdConfigProvider>, "children">
  >;
  chakraProviderProps?: Partial<
    Omit<React.ComponentProps<typeof ChakraProvider>, "children">
  >;
  web3GlobalContextProps?: Partial<
    Omit<React.ComponentProps<typeof Web3GlobalContext>, "children">
  >;
}

export default function GlobalContextsProvider(
  props: GlobalContextsProviderProps
) {
  const {
    children,
    antdConfigProviderProps,
    chakraProviderProps,
    web3GlobalContextProps
  } = props;

  return (
    <AntdConfigProvider
      {...antdConfigProviderProps}
      borderRadius={
        antdConfigProviderProps && "borderRadius" in antdConfigProviderProps
          ? antdConfigProviderProps.borderRadius!
          : 123123
      }
      colorBgBase={
        antdConfigProviderProps && "colorBgBase" in antdConfigProviderProps
          ? antdConfigProviderProps.colorBgBase!
          : "#ffffff"
      }
      colorError={
        antdConfigProviderProps && "colorError" in antdConfigProviderProps
          ? antdConfigProviderProps.colorError!
          : "#ff4d4f"
      }
      colorInfo={
        antdConfigProviderProps && "colorInfo" in antdConfigProviderProps
          ? antdConfigProviderProps.colorInfo!
          : "#1677ff"
      }
      colorPrimary={
        antdConfigProviderProps && "colorPrimary" in antdConfigProviderProps
          ? antdConfigProviderProps.colorPrimary!
          : "#1677ff"
      }
      colorSuccess={
        antdConfigProviderProps && "colorSuccess" in antdConfigProviderProps
          ? antdConfigProviderProps.colorSuccess!
          : "#52c41a"
      }
      colorWarning={
        antdConfigProviderProps && "colorWarning" in antdConfigProviderProps
          ? antdConfigProviderProps.colorWarning!
          : "#faad14"
      }
      controlHeight={
        antdConfigProviderProps && "controlHeight" in antdConfigProviderProps
          ? antdConfigProviderProps.controlHeight!
          : 32
      }
      defaultDark={
        antdConfigProviderProps && "defaultDark" in antdConfigProviderProps
          ? antdConfigProviderProps.defaultDark!
          : false
      }
      lineWidth={
        antdConfigProviderProps && "lineWidth" in antdConfigProviderProps
          ? antdConfigProviderProps.lineWidth!
          : 1
      }
      loadingText={
        antdConfigProviderProps && "loadingText" in antdConfigProviderProps
          ? antdConfigProviderProps.loadingText!
          : undefined
      }
      removeLoading={
        antdConfigProviderProps && "removeLoading" in antdConfigProviderProps
          ? antdConfigProviderProps.removeLoading!
          : false
      }
      sizeStep={
        antdConfigProviderProps && "sizeStep" in antdConfigProviderProps
          ? antdConfigProviderProps.sizeStep!
          : 4
      }
      sizeUnit={
        antdConfigProviderProps && "sizeUnit" in antdConfigProviderProps
          ? antdConfigProviderProps.sizeUnit!
          : 4
      }
      themeStyles={
        antdConfigProviderProps && "themeStyles" in antdConfigProviderProps
          ? antdConfigProviderProps.themeStyles!
          : true
          ? {
              fontFamily: "Roboto",
              fontSize: "16px",
              fontWeight: "400",
              lineHeight: "1.5",
              color: "#535353",
              letterSpacing: "normal"
            }
          : undefined
      }
      wireframe={
        antdConfigProviderProps && "wireframe" in antdConfigProviderProps
          ? antdConfigProviderProps.wireframe!
          : false
      }
    >
      <ChakraProvider
        {...chakraProviderProps}
        theme={
          chakraProviderProps && "theme" in chakraProviderProps
            ? chakraProviderProps.theme!
            : undefined
        }
      >
        <Web3GlobalContext
          {...web3GlobalContextProps}
          apiUrl={
            web3GlobalContextProps && "apiUrl" in web3GlobalContextProps
              ? web3GlobalContextProps.apiUrl!
              : undefined
          }
          contractPackageId={
            web3GlobalContextProps &&
            "contractPackageId" in web3GlobalContextProps
              ? web3GlobalContextProps.contractPackageId!
              : "0x2d99da054514ff31c7e7da82751d11bb16b53c66290c435a409e17c8992e35ed"
          }
          createdCollection={
            web3GlobalContextProps &&
            "createdCollection" in web3GlobalContextProps
              ? web3GlobalContextProps.createdCollection!
              : "launchpadCollectionId"
          }
          importedCollection={
            web3GlobalContextProps &&
            "importedCollection" in web3GlobalContextProps
              ? web3GlobalContextProps.importedCollection!
              : "qLP7ErC94TEE4dz5dv2X5Z"
          }
        >
          {children}
        </Web3GlobalContext>
      </ChakraProvider>
    </AntdConfigProvider>
  );
}
