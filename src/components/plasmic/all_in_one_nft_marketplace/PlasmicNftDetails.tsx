// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qLP7ErC94TEE4dz5dv2X5Z
// Component: A4FVXf6p_GnE

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: 10EiSPWhbhx8/component
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { NumberInput } from "@chakra-ui/react";
import { NumberInputStepper } from "@chakra-ui/react";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import Footer from "../../Footer"; // plasmic-import: -cOCZnE_z14s/component

import { useScreenVariants as useScreenVariantsp6MrClqyiXeZ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: p6MrClqyiXeZ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: 66MC2d9B7YecVEphuUMtqF/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qLP7ErC94TEE4dz5dv2X5Z/projectcss
import sty from "./PlasmicNftDetails.module.css"; // plasmic-import: A4FVXf6p_GnE/css

import CloseSquareSvgIcon from "./icons/PlasmicIcon__CloseSquareSvg"; // plasmic-import: kt2lZi3XfMqX/icon

createPlasmicElementProxy;

export type PlasmicNftDetails__VariantMembers = {};
export type PlasmicNftDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicNftDetails__VariantsArgs;
export const PlasmicNftDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicNftDetails__ArgsType = {};
type ArgPropType = keyof PlasmicNftDetails__ArgsType;
export const PlasmicNftDetails__ArgProps = new Array<ArgPropType>();

export type PlasmicNftDetails__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  tabs?: Flex__<typeof AntdTabs>;
  unlistModal?: Flex__<typeof AntdModal>;
  buyNftModal?: Flex__<typeof AntdModal>;
  listNftModal?: Flex__<typeof AntdModal>;
  chakraUiNumberInput?: Flex__<typeof NumberInput>;
  chakraUiNumberInputStepper?: Flex__<typeof NumberInputStepper>;
  listPriceInput?: Flex__<typeof AntdInputNumber>;
  confirmListingModal?: Flex__<typeof AntdModal>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultNftDetailsProps {
  className?: string;
}

const $$ = {};

function PlasmicNftDetails__RenderFunc(props: {
  variants: PlasmicNftDetails__VariantsArgs;
  args: PlasmicNftDetails__ArgsType;
  overrides: PlasmicNftDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "unlistModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buyNftModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "listNftModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "listPriceInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "confirmListingModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "nftList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: "1149",
            network: "testnet",
            version: "389959602",
            nftId:
              "0xf3e7313b894b6523cb2546aa4168976a3273651fe53752e79138a4a8c93414b0",
            name: "Suinova: suinova #113",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/0ebzB8okTbW6EO1Hcv4Ul0SeK3BIVBtWCJi5CghtJoI",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618094145",
            fields: null,
            createdAt: "2025-04-16T23:05:55.264Z",
            updatedAt: "2025-04-21T17:00:15.264Z",
            isListed: true
          },
          {
            id: "1148",
            network: "testnet",
            version: "389960771",
            nftId:
              "0xedceb0877664d1bfef0d69191a48e88116cf7916e142de429f4149ecfefee8d2",
            name: "Suinova: suinova #130",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/qMWIRfTw7eW77HdNqSlnrbpIR69KcIq2Zc5xjPtew3Y",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618187710",
            fields: null,
            createdAt: "2025-04-16T23:05:55.258Z",
            updatedAt: "2025-04-21T17:00:15.258Z",
            isListed: false
          },
          {
            id: "1147",
            network: "testnet",
            version: "389959373",
            nftId:
              "0xec319cc9d7e761e30081f542ee7e9534bde60a0f183aec862c71761a0dd2121e",
            name: "Suinova: suinova #110",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ysw7kTe2fV3TXtEsQOqedbwYCnQarv1FZBMeHMn6cKw",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618076375",
            fields: null,
            createdAt: "2025-04-16T23:05:55.253Z",
            updatedAt: "2025-04-21T17:00:15.253Z",
            isListed: true
          },
          {
            id: "1146",
            network: "testnet",
            version: "389959464",
            nftId:
              "0xe709728193dc659af64fbb8e6f76a7343801b577834c30a99b8251af41014dea",
            name: "Suinova: suinova #111",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/wxk6OnYp9c7PL7QjeX-sUNzYt-VeSw0zixb88iaQXjA",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618083031",
            fields: null,
            createdAt: "2025-04-16T23:05:55.247Z",
            updatedAt: "2025-04-21T17:00:15.247Z",
            isListed: false
          },
          {
            id: "1145",
            network: "testnet",
            version: "389960145",
            nftId:
              "0xe4c667a26d1972a81a442b08c65253be72d80ce99902d48d05615498659d0c87",
            name: "Suinova: suinova #121",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/WgUl3WoEN8aCcW8SERooybA3UY-8p4KPiNSXAvHmpsM",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618138321",
            fields: null,
            createdAt: "2025-04-16T23:05:55.242Z",
            updatedAt: "2025-04-21T17:00:15.242Z",
            isListed: true
          },
          {
            id: "1144",
            network: "testnet",
            version: "389956529",
            nftId:
              "0xd94231185f3cd03b11d6f3e49034e83eca0c1788b39964c3190e08cf86e459b0",
            name: "Suinova: suinova #4",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/Xi0cYbJr1ClVwxnEhY91ufKWt2oq22LeSzpwmaKQ8-s,",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617853488",
            fields: null,
            createdAt: "2025-04-16T23:05:55.237Z",
            updatedAt: "2025-04-21T17:00:15.237Z",
            isListed: false
          },
          {
            id: "1143",
            network: "testnet",
            version: "389945709",
            nftId:
              "0xd14d0eb91c8781510424618a4c2fb51ab03070181a1e458bea954bb3cc9675da",
            name: "Suinova: suinova",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617003255",
            fields: null,
            createdAt: "2025-04-16T23:05:55.232Z",
            updatedAt: "2025-04-21T17:00:15.232Z",
            isListed: true
          },
          {
            id: "1142",
            network: "testnet",
            version: "389958682",
            nftId:
              "0xcc218d790d31edddee0ebc5251bede507d5d0bb57b29a9d732da12e02513d23d",
            name: "Suinova: suinova #100",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/0ebzB8okTbW6EO1Hcv4Ul0SeK3BIVBtWCJi5CghtJoI",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618025608",
            fields: null,
            createdAt: "2025-04-16T23:05:55.226Z",
            updatedAt: "2025-04-21T17:00:15.225Z",
            isListed: false
          },
          {
            id: "1141",
            network: "testnet",
            version: "389958771",
            nftId:
              "0xcb93ed5720fbae440ba38c8bee0dfda52a24d4e808644c89c28f22e713583d92",
            name: "Suinova: suinova #101",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ysw7kTe2fV3TXtEsQOqedbwYCnQarv1FZBMeHMn6cKw",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618032284",
            fields: null,
            createdAt: "2025-04-16T23:05:54.870Z",
            updatedAt: "2025-04-21T17:00:12.118Z",
            isListed: true
          },
          {
            id: "1140",
            network: "testnet",
            version: "389960964",
            nftId:
              "0xc6edd349d199584a0ea2abf082bd3f1cda38977daf6311a6dfc1d5976385bb73",
            name: "Suinova: suinova #133",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ilwqBHFUDxJ_r_bk1SmJYZpTnMeDXWG8cg9JoyyKHYs",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618203171",
            fields: null,
            createdAt: "2025-04-16T23:05:54.864Z",
            updatedAt: "2025-04-21T17:00:12.113Z",
            isListed: false
          },
          {
            id: "1139",
            network: "testnet",
            version: "389957707",
            nftId:
              "0xc658fa4d36e3b26353a8d0a88f1424872fa08231ddf76462f68b704a05b223a5",
            name: "Suinova: suinova #1",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/qMWIRfTw7eW77HdNqSlnrbpIR69KcIq2Zc5xjPtew3Y",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617946664",
            fields: null,
            createdAt: "2025-04-16T23:05:54.859Z",
            updatedAt: "2025-04-21T17:00:12.108Z",
            isListed: true
          },
          {
            id: "1138",
            network: "testnet",
            version: "389961135",
            nftId:
              "0xc1346345c5a7b93e8ecb943dd1e87de9ee5547faf82d6abfb1d2fc0b16a7af62",
            name: "Suinova: suinova #136",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/0ebzB8okTbW6EO1Hcv4Ul0SeK3BIVBtWCJi5CghtJoI",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618219275",
            fields: null,
            createdAt: "2025-04-16T23:05:54.848Z",
            updatedAt: "2025-04-21T17:00:12.102Z",
            isListed: false
          },
          {
            id: "1137",
            network: "testnet",
            version: "389959283",
            nftId:
              "0xc0cb3976ccc09f784ce0a8e9bec3234210224bd370e132f00fc0bd217294003d",
            name: "Suinova: suinova #109",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ilwqBHFUDxJ_r_bk1SmJYZpTnMeDXWG8cg9JoyyKHYs",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618069846",
            fields: null,
            createdAt: "2025-04-16T23:05:54.841Z",
            updatedAt: "2025-04-21T17:00:12.097Z",
            isListed: true
          },
          {
            id: "1136",
            network: "testnet",
            version: "389960063",
            nftId:
              "0xbf188117be4dc141f69b57b03001b034af17aa1a2c501e2fca6b53814e59588d",
            name: "Suinova: suinova #120",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/WgUl3WoEN8aCcW8SERooybA3UY-8p4KPiNSXAvHmpsM",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618132167",
            fields: null,
            createdAt: "2025-04-16T23:05:54.835Z",
            updatedAt: "2025-04-21T17:00:12.091Z",
            isListed: false
          },
          {
            id: "1135",
            network: "testnet",
            version: "389960349",
            nftId:
              "0xbeefcfa06e2d62fb8bb7b4b677fab5d24e79be1a2c7e2e53294c2e4e6ca93d3a",
            name: "Suinova: suinova #124",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ilwqBHFUDxJ_r_bk1SmJYZpTnMeDXWG8cg9JoyyKHYs",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618154127",
            fields: null,
            createdAt: "2025-04-16T23:05:54.828Z",
            updatedAt: "2025-04-21T17:00:12.085Z",
            isListed: true
          },
          {
            id: "1134",
            network: "testnet",
            version: "389956475",
            nftId:
              "0xbc4e3d3a115d280b14dc6378228182262a0bf4daaf2edfd9aea81451f2088ab1",
            name: "Suinova: suinova #3",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/6xG2gz-9DtFWRd--DmjC62uIxd9O3RfkTMftof9kHMQ,",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617848647",
            fields: null,
            createdAt: "2025-04-16T23:05:54.822Z",
            updatedAt: "2025-04-21T17:00:12.079Z",
            isListed: false
          }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsp6MrClqyiXeZ()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__wjkBo)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fdlMx)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__cvcbr)}>
                <div className={classNames(projectcss.all, sty.freeBox__isRjW)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__sgIh6)}
                    displayHeight={"100%"}
                    displayMaxHeight={"480px"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tabletSmall")
                        ? "none"
                        : "480px"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "tabletSmall")
                        ? "100%"
                        : "100%"
                    }
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return $state.nftList.find(
                          nft => nft.nftId === $ctx.params.slug
                        )?.imageUrl;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
                <AntdTabs
                  data-plasmic-name={"tabs"}
                  data-plasmic-override={overrides.tabs}
                  activeKey={generateStateValueProp($state, [
                    "tabs",
                    "activeKey"
                  ])}
                  animateTabBar={true}
                  animateTabContent={false}
                  animated={true}
                  className={classNames("__wab_instance", sty.tabs)}
                  defaultActiveKey={"1"}
                  items={
                    <React.Fragment>
                      <AntdTabItem
                        className={classNames(
                          "__wab_instance",
                          sty.tabItem__jOVsG
                        )}
                        key={"1"}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8VMml
                            )}
                          >
                            {"Traits"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___53Ncj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__m0OAh
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___7R3VN
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pkPi0
                                )}
                              >
                                {"Background"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xuWz3
                                )}
                              >
                                {"Grey"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qyzKe
                                )}
                              >
                                {"30 (30%)"}
                              </div>
                            </Stack__>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wTJrb
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gye4B
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jr15P
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vOef6
                                  )}
                                >
                                  {"Helmet Glass Type"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8DkHw
                                  )}
                                >
                                  {"Reflective"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hX1
                                  )}
                                >
                                  {"10 (10%)"}
                                </div>
                              </Stack__>
                            </div>
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fa8Gh
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rZQma
                              )}
                            >
                              {"Suit Color"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mAz3Z
                              )}
                            >
                              {"Grey"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__e94Cn
                              )}
                            >
                              {"30 (30%)"}
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eUd2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8YpjE
                              )}
                            >
                              {"Character"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__q9Rml
                              )}
                            >
                              {"Astronaut"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nJyUm
                              )}
                            >
                              {"30 (30%)"}
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___3ZIz
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__i9HZb
                              )}
                            >
                              {"Reflection"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__scnaJ
                              )}
                            >
                              {"Space"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uzcpT
                              )}
                            >
                              {"30 (30%)"}
                            </div>
                          </Stack__>
                        </div>
                      </AntdTabItem>
                      <AntdTabItem
                        className={classNames(
                          "__wab_instance",
                          sty.tabItem__bcXFk
                        )}
                        key={"2"}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ebvBp
                            )}
                          >
                            {"Info"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7BXjR
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mZ8Uc
                            )}
                          >
                            {"Description"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zImFy
                            )}
                          >
                            {
                              "The Magic astronaut is a unique NFT on the Ethereum blockchain\n\nThere are all sorts of beings in the NFT Universe. The most advanced and friendly of the bunch are Orbitians. They live in a metal space machines, high up in the sky and only have one foot on Earth.\nThese Orbitians are a peaceful race, but they have been at war with a group of invaders for many generations."
                            }
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yjxPm
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yxPCg
                            )}
                          >
                            {"Details"}
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gnKpm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oGSqp
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ztLy
                                )}
                              >
                                {"NFT Type"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rA2BH
                                )}
                              >
                                {
                                  "0xd2197b1ce2096e96e726c29fa2c138c5c6748da169b81d34927c522b7499f1d7::ika_chan_nft::IkaChanNft"
                                }
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__m13M
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yMSd
                                )}
                              >
                                {"Royalties Fee"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8Wyi3
                                )}
                              >
                                {"1.5%"}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dzctS
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__s1Bp
                                )}
                              >
                                {"Blockchain"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qLhjv
                                )}
                              >
                                {"SUI"}
                              </div>
                            </div>
                          </Stack__>
                        </div>
                      </AntdTabItem>
                    </React.Fragment>
                  }
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "tabs",
                      "activeKey"
                    ]).apply(null, eventArgs);
                  }}
                  sticky={false}
                  tabBarBackground={"#FFF"}
                  tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
                  tabsScopeClassName={sty["tabs__tabs"]}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___9PPy)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mUujb
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.nftList.find(
                          nft => nft.nftId === $ctx.params.slug
                        )?.name;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Owned by Keepitreal";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6Ff9F)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ifxvc
                    )}
                  >
                    {"Owned by Keepitreal"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__jZ1Yw)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yjWu8
                    )}
                  >
                    {"Current price"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Pj5V
                    )}
                  >
                    {"20 SUI"}
                  </div>
                  <AntdModal
                    data-plasmic-name={"unlistModal"}
                    data-plasmic-override={overrides.unlistModal}
                    className={classNames("__wab_instance", sty.unlistModal)}
                    closeButtonClassName={classNames({
                      [sty["pcls_P9IAmLnDxXxo"]]: true
                    })}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    modalScopeClassName={sty["unlistModal__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "unlistModal",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "unlistModal",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ivEul
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h1PMs
                          )}
                        >
                          {"Cancel Listing"}
                        </div>
                        <CloseSquareSvgIcon
                          className={classNames(projectcss.all, sty.svg__qiAqc)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateUnlistModalOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["unlistModal", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateUnlistModalOpen"] != null &&
                              typeof $steps["updateUnlistModalOpen"] ===
                                "object" &&
                              typeof $steps["updateUnlistModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateUnlistModalOpen"] = await $steps[
                                "updateUnlistModalOpen"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                    }
                    trigger={
                      (() => {
                        try {
                          return (
                            $state.nftList.find(
                              nft => nft.nftId === $ctx.params.slug
                            )?.listingStatus !== "NOT_LISTED" &&
                            $state.nftList.find(
                              nft => nft.nftId === $ctx.params.slug
                            )?.ownerAddress ===
                              $ctx.web3WalletData.walletAddress
                          );
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__j4P2N
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5YkxT
                            )}
                          >
                            {"Cancel listing"}
                          </div>
                        </AntdButton>
                      ) : null
                    }
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__a5YRo)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__wluvI)}
                        displayHeight={"auto"}
                        displayMaxHeight={"200px"}
                        displayMaxWidth={"200px"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return $state.nftList.find(
                              nft => nft.nftId === $ctx.params.slug
                            )?.imageUrl;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fbcTh
                        )}
                      >
                        {""}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ywtfn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___76Fkx
                          )}
                        >
                          {"Listing Price"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rwsVk
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__vIIno)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            height={"16px"}
                            loading={"lazy"}
                            src={
                              "https://s3-alpha-sig.figma.com/img/d0c4/ee53/c47056db6cc7fc22e11023a90f3439cf?Expires=1744588800&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=n50DJwMsLo6Yz1NbtqDGKi-DIv5wUfcPWEN8~38rzw6lUDBpJItLEfzogzr5YdPnFutiYbadES1CmoAoTpL~cGERhVB94Y1ILLQwoeN52LrfaK4EgehMoUyVf90S2vESr3fxG4zBN1KFHYNctxkpn2swa~kQCU8K43Q23USFO5QVsnAaIH8XUTe5aK58leEbGiA5hsaCi30pvA8by~GylIg8YUO7YQ5yUYUhneh6JdJiH8Hpwv7Kzl9ryh70aeyqj101uJ2uivIgEmvTT92hwJQyU8YXOrzMFZwcpYg469XXqJToptEQBe-0zs6q60iJkLkMUEhWnNBMEbJakH03lA__"
                            }
                            width={"13px"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gCjl7
                            )}
                          >
                            {"20"}
                          </div>
                        </div>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zxIiQ
                        )}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button___0Ea25
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateUnlistModalOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["unlistModal", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateUnlistModalOpen"] != null &&
                              typeof $steps["updateUnlistModalOpen"] ===
                                "object" &&
                              typeof $steps["updateUnlistModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateUnlistModalOpen"] = await $steps[
                                "updateUnlistModalOpen"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__exVlq
                            )}
                          >
                            {"Cancel"}
                          </div>
                        </AntdButton>
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__rtJXw
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateUnlistModalOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["unlistModal", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateUnlistModalOpen"] != null &&
                              typeof $steps["updateUnlistModalOpen"] ===
                                "object" &&
                              typeof $steps["updateUnlistModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateUnlistModalOpen"] = await $steps[
                                "updateUnlistModalOpen"
                              ];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "success",
                                      "Cancel listing successfully",
                                      undefined,
                                      2
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__h0AV6
                            )}
                          >
                            {"Cancel Listing"}
                          </div>
                        </AntdButton>
                      </Stack__>
                    </div>
                  </AntdModal>
                  <AntdModal
                    data-plasmic-name={"buyNftModal"}
                    data-plasmic-override={overrides.buyNftModal}
                    className={classNames("__wab_instance", sty.buyNftModal)}
                    closeButtonClassName={classNames({
                      [sty["pcls_te4KcHt9wg6Q"]]: true
                    })}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    modalScopeClassName={sty["buyNftModal__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "buyNftModal",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "buyNftModal",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sXl1B
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oRsLu
                          )}
                        >
                          {"Complete Checkout"}
                        </div>
                        <CloseSquareSvgIcon
                          className={classNames(projectcss.all, sty.svg__bPcDi)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateBuyNftModalOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["buyNftModal", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateBuyNftModalOpen"] != null &&
                              typeof $steps["updateBuyNftModalOpen"] ===
                                "object" &&
                              typeof $steps["updateBuyNftModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateBuyNftModalOpen"] = await $steps[
                                "updateBuyNftModalOpen"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                    }
                    trigger={
                      (() => {
                        try {
                          return (
                            $state.nftList.find(
                              nft => nft.nftId === $ctx.params.slug
                            )?.ownerAddress !==
                            $ctx.web3WalletData.walletAddress
                          );
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__yJu5F
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oNzvG
                            )}
                          >
                            {"Buy Now"}
                          </div>
                        </AntdButton>
                      ) : null
                    }
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bGf2K)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mS9F1
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__cTkbm)}
                          displayHeight={"auto"}
                          displayMaxHeight={"200px"}
                          displayMaxWidth={"200px"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return $state.nftList.find(
                                nft => nft.nftId === $ctx.params.slug
                              )?.imageUrl;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___91PI
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hg4V
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jOyO
                            )}
                          >
                            {"Price"}
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___43Tp
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__dvMi)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              height={"16px"}
                              loading={"lazy"}
                              src={
                                "https://s3-alpha-sig.figma.com/img/d0c4/ee53/c47056db6cc7fc22e11023a90f3439cf?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=kQ6yVrGzCA1pHyRfRflxGiEqMfqg69KVExhe8YqkbRFbYdf46goQI2Rov3zlnWCRzMgH8VRtzsao5svDz3d~XS-kPrxYmQGVz8AO597uv~QSSkq2wQAhVRYxulGZ6XBvET~z39DelK0BD2RcHbRYOGEGbtNts2qKsYrZXmcySmON3NuOZEcFGbveXMEchI-9GAYyPt64Igr2K8Oh5Xvm4R3RVlLcWO3g58~DLRmkKV1thVWA2BDIJeFejNxffySi8DVxkd50HEJNNZHH~-~v67ZSOI7j9QhmARDEhTPGNIz2nXJ0Lxn-UG54hrUt~a7pYFged~iucwZjqB2asfFFww__"
                              }
                              width={"13px"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kkJuv
                              )}
                            >
                              {"20"}
                            </div>
                          </Stack__>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__weus
                          )}
                        >
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__jMbu6
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateBuyNftModalOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["buyNftModal", "open"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateBuyNftModalOpen"] != null &&
                                typeof $steps["updateBuyNftModalOpen"] ===
                                  "object" &&
                                typeof $steps["updateBuyNftModalOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateBuyNftModalOpen"] = await $steps[
                                  "updateBuyNftModalOpen"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zltRw
                              )}
                            >
                              {"Cancel"}
                            </div>
                          </AntdButton>
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__djMid
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateBuyNftModalOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["buyNftModal", "open"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateBuyNftModalOpen"] != null &&
                                typeof $steps["updateBuyNftModalOpen"] ===
                                  "object" &&
                                typeof $steps["updateBuyNftModalOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateBuyNftModalOpen"] = await $steps[
                                  "updateBuyNftModalOpen"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "success",
                                        "Buy NFT successfully",
                                        undefined,
                                        2
                                      ]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bdOtx
                              )}
                            >
                              {"Checkout"}
                            </div>
                          </AntdButton>
                        </Stack__>
                      </div>
                    </div>
                  </AntdModal>
                  <AntdModal
                    data-plasmic-name={"listNftModal"}
                    data-plasmic-override={overrides.listNftModal}
                    className={classNames("__wab_instance", sty.listNftModal)}
                    closeButtonClassName={classNames({
                      [sty["pcls_OQIASdMfG9EO"]]: true
                    })}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    modalScopeClassName={sty["listNftModal__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "listNftModal",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "listNftModal",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l3GfF
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1JTyK
                          )}
                        >
                          {"List For Sale"}
                        </div>
                        <CloseSquareSvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8NDuo
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateListNftModalOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["listNftModal", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateListNftModalOpen"] != null &&
                              typeof $steps["updateListNftModalOpen"] ===
                                "object" &&
                              typeof $steps["updateListNftModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateListNftModalOpen"] = await $steps[
                                "updateListNftModalOpen"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                    }
                    trigger={
                      (() => {
                        try {
                          return (
                            $state.nftList.find(
                              nft => nft.nftId === $ctx.params.slug
                            )?.listingStatus === "NOT_LISTED" &&
                            $state.nftList.find(
                              nft => nft.nftId === $ctx.params.slug
                            )?.ownerAddress ===
                              $ctx.web3WalletData.walletAddress
                          );
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__ke4IO
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8UzcO
                            )}
                          >
                            {"List Now"}
                          </div>
                        </AntdButton>
                      ) : null
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Sov5
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nM9Ud
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__lBlB8)}
                          displayHeight={"auto"}
                          displayMaxHeight={"200px"}
                          displayMaxWidth={"200px"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return $state.nftList.find(
                                nft => nft.nftId === $ctx.params.slug
                              )?.imageUrl;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__azP7J
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pvUEh
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__exlb0
                            )}
                          >
                            {""}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__itbMt
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jcRDh
                              )}
                            >
                              {"Listing Price"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xUTb
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__ythH2)}
                                displayHeight={"16px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"13px"}
                                loading={"lazy"}
                                src={
                                  "https://s3-alpha-sig.figma.com/img/d0c4/ee53/c47056db6cc7fc22e11023a90f3439cf?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=kQ6yVrGzCA1pHyRfRflxGiEqMfqg69KVExhe8YqkbRFbYdf46goQI2Rov3zlnWCRzMgH8VRtzsao5svDz3d~XS-kPrxYmQGVz8AO597uv~QSSkq2wQAhVRYxulGZ6XBvET~z39DelK0BD2RcHbRYOGEGbtNts2qKsYrZXmcySmON3NuOZEcFGbveXMEchI-9GAYyPt64Igr2K8Oh5Xvm4R3RVlLcWO3g58~DLRmkKV1thVWA2BDIJeFejNxffySi8DVxkd50HEJNNZHH~-~v67ZSOI7j9QhmARDEhTPGNIz2nXJ0Lxn-UG54hrUt~a7pYFged~iucwZjqB2asfFFww__"
                                }
                              />

                              <NumberInput
                                data-plasmic-name={"chakraUiNumberInput"}
                                data-plasmic-override={
                                  overrides.chakraUiNumberInput
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiNumberInput
                                )}
                                errorBorderColor={"red.500"}
                                focusBorderColor={"blue.500"}
                              >
                                <NumberInputStepper
                                  data-plasmic-name={
                                    "chakraUiNumberInputStepper"
                                  }
                                  data-plasmic-override={
                                    overrides.chakraUiNumberInputStepper
                                  }
                                  children={null}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.chakraUiNumberInputStepper
                                  )}
                                />
                              </NumberInput>
                              <AntdInputNumber
                                data-plasmic-name={"listPriceInput"}
                                data-plasmic-override={overrides.listPriceInput}
                                bordered={false}
                                className={classNames(
                                  "__wab_instance",
                                  sty.listPriceInput
                                )}
                                min={0}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "listPriceInput",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                type={"number"}
                                value={generateStateValueProp($state, [
                                  "listPriceInput",
                                  "value"
                                ])}
                              />
                            </div>
                          </div>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zdEW
                          )}
                        >
                          {(() => {
                            try {
                              return !$state.listPriceInput.value;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__en7Tm
                              )}
                              disabled={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__flEx
                                )}
                              >
                                {"Next"}
                              </div>
                            </AntdButton>
                          ) : null}
                        </Stack__>
                        <AntdModal
                          data-plasmic-name={"confirmListingModal"}
                          data-plasmic-override={overrides.confirmListingModal}
                          className={classNames(
                            "__wab_instance",
                            sty.confirmListingModal
                          )}
                          closeButtonClassName={classNames({
                            [sty["pcls_XZf3uV1tL3ea"]]: true
                          })}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_css.plasmic_tokens
                          )}
                          hideFooter={true}
                          modalScopeClassName={
                            sty["confirmListingModal__modal"]
                          }
                          onOpenChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "confirmListingModal",
                              "open"
                            ]).apply(null, eventArgs);
                          }}
                          open={generateStateValueProp($state, [
                            "confirmListingModal",
                            "open"
                          ])}
                          title={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zAlf6
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yczwZ
                                )}
                              >
                                {"Confirm Listing"}
                              </div>
                              <CloseSquareSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___4QbF
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateConfirmListingModalOpen"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "confirmListingModal",
                                              "open"
                                            ]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateConfirmListingModalOpen"] !=
                                      null &&
                                    typeof $steps[
                                      "updateConfirmListingModalOpen"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateConfirmListingModalOpen"
                                    ].then === "function"
                                  ) {
                                    $steps["updateConfirmListingModalOpen"] =
                                      await $steps[
                                        "updateConfirmListingModalOpen"
                                      ];
                                  }

                                  $steps["updateTabsActiveKey"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["tabs", "activeKey"]
                                          },
                                          operation: 0
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateTabsActiveKey"] != null &&
                                    typeof $steps["updateTabsActiveKey"] ===
                                      "object" &&
                                    typeof $steps["updateTabsActiveKey"]
                                      .then === "function"
                                  ) {
                                    $steps["updateTabsActiveKey"] =
                                      await $steps["updateTabsActiveKey"];
                                  }
                                }}
                                role={"img"}
                              />
                            </div>
                          }
                          trigger={
                            (() => {
                              try {
                                return !!$state.listPriceInput.value;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__idsd3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xJqji
                                  )}
                                >
                                  {"Next"}
                                </div>
                              </AntdButton>
                            ) : null
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bpWsv
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__iyACf)}
                              displayHeight={"auto"}
                              displayMaxHeight={"200px"}
                              displayMaxWidth={"200px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={(() => {
                                try {
                                  return $state.nftList.find(
                                    nft => nft.nftId === $ctx.params.slug
                                  )?.imageUrl;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ktTy2
                              )}
                            >
                              {""}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yU6PS
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rFbO
                                )}
                              >
                                {""}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jLaAl
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__unK4A
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___9Fccq
                                    )}
                                  >
                                    {"Listing Price"}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__eEXo4
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__werbm)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={"16px"}
                                      loading={"lazy"}
                                      src={
                                        "https://s3-alpha-sig.figma.com/img/d0c4/ee53/c47056db6cc7fc22e11023a90f3439cf?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=kQ6yVrGzCA1pHyRfRflxGiEqMfqg69KVExhe8YqkbRFbYdf46goQI2Rov3zlnWCRzMgH8VRtzsao5svDz3d~XS-kPrxYmQGVz8AO597uv~QSSkq2wQAhVRYxulGZ6XBvET~z39DelK0BD2RcHbRYOGEGbtNts2qKsYrZXmcySmON3NuOZEcFGbveXMEchI-9GAYyPt64Igr2K8Oh5Xvm4R3RVlLcWO3g58~DLRmkKV1thVWA2BDIJeFejNxffySi8DVxkd50HEJNNZHH~-~v67ZSOI7j9QhmARDEhTPGNIz2nXJ0Lxn-UG54hrUt~a7pYFged~iucwZjqB2asfFFww__"
                                      }
                                      width={"13px"}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___6Y2St
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.listPriceInput.value;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "0.3";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </Stack__>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__htSxZ
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rt6F0
                                    )}
                                  >
                                    {"Creator Earnings 1.5%"}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__uztC
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__oPbP)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={"16px"}
                                      loading={"lazy"}
                                      src={
                                        "https://s3-alpha-sig.figma.com/img/d0c4/ee53/c47056db6cc7fc22e11023a90f3439cf?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=kQ6yVrGzCA1pHyRfRflxGiEqMfqg69KVExhe8YqkbRFbYdf46goQI2Rov3zlnWCRzMgH8VRtzsao5svDz3d~XS-kPrxYmQGVz8AO597uv~QSSkq2wQAhVRYxulGZ6XBvET~z39DelK0BD2RcHbRYOGEGbtNts2qKsYrZXmcySmON3NuOZEcFGbveXMEchI-9GAYyPt64Igr2K8Oh5Xvm4R3RVlLcWO3g58~DLRmkKV1thVWA2BDIJeFejNxffySi8DVxkd50HEJNNZHH~-~v67ZSOI7j9QhmARDEhTPGNIz2nXJ0Lxn-UG54hrUt~a7pYFged~iucwZjqB2asfFFww__"
                                      }
                                      width={"13px"}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___4KbOr
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              ($state.listPriceInput.value ||
                                                0) * 0.015
                                            ).toFixed(2);
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "0.3";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </Stack__>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xOeNd
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__tkxfy
                                    )}
                                  >
                                    {"Total Potential Earnings"}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__jUxZ
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__o18S3)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={"16px"}
                                      loading={"lazy"}
                                      src={
                                        "https://s3-alpha-sig.figma.com/img/d0c4/ee53/c47056db6cc7fc22e11023a90f3439cf?Expires=1745798400&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=kQ6yVrGzCA1pHyRfRflxGiEqMfqg69KVExhe8YqkbRFbYdf46goQI2Rov3zlnWCRzMgH8VRtzsao5svDz3d~XS-kPrxYmQGVz8AO597uv~QSSkq2wQAhVRYxulGZ6XBvET~z39DelK0BD2RcHbRYOGEGbtNts2qKsYrZXmcySmON3NuOZEcFGbveXMEchI-9GAYyPt64Igr2K8Oh5Xvm4R3RVlLcWO3g58~DLRmkKV1thVWA2BDIJeFejNxffySi8DVxkd50HEJNNZHH~-~v67ZSOI7j9QhmARDEhTPGNIz2nXJ0Lxn-UG54hrUt~a7pYFged~iucwZjqB2asfFFww__"
                                      }
                                      width={"13px"}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tydN7
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              ($state.listPriceInput.value ||
                                                0) -
                                              ($state.listPriceInput.value ||
                                                0) *
                                                0.015
                                            ).toFixed(2);
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "0.3";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </Stack__>
                                </div>
                              </div>
                            </div>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mTgvx
                              )}
                            >
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__kRfDg
                                )}
                                onClick={async () => {
                                  const $steps = {};

                                  $steps["updateConfirmListingModalOpen"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "confirmListingModal",
                                              "open"
                                            ]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateConfirmListingModalOpen"] !=
                                      null &&
                                    typeof $steps[
                                      "updateConfirmListingModalOpen"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateConfirmListingModalOpen"
                                    ].then === "function"
                                  ) {
                                    $steps["updateConfirmListingModalOpen"] =
                                      await $steps[
                                        "updateConfirmListingModalOpen"
                                      ];
                                  }
                                }}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wcjM4
                                  )}
                                >
                                  {"Back"}
                                </div>
                              </AntdButton>
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__oKn2
                                )}
                                onClick={async () => {
                                  const $steps = {};

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              $state.confirmListingModal.open =
                                                false;
                                              return setTimeout(() => {
                                                $state.listNftModal.open =
                                                  false;
                                              });
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["invokeGlobalAction"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "success",
                                            "List NFT successfully",
                                            undefined,
                                            2
                                          ]
                                        };
                                        return $globalActions[
                                          "plasmic-antd5-config-provider.showNotification"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] = await $steps[
                                      "invokeGlobalAction"
                                    ];
                                  }
                                }}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__rH7P
                                  )}
                                >
                                  {"Confirm"}
                                </div>
                              </AntdButton>
                            </Stack__>
                          </div>
                        </AntdModal>
                      </div>
                    </div>
                  </AntdModal>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uf7X8)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uCodO
                    )}
                  >
                    {"History"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__a4Ug6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__b7Ol8)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e47Kz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l8Wux
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{"Listed by "}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Keepitreal"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pf9Gh
                          )}
                        >
                          {"Mar 21, 2024 10:00 PM"}
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vgYyJ)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dqKdn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v2Vn1
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fh2Bu
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{"Listed by "}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Keepitreal"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__o6Gt8
                          )}
                        >
                          {"Mar 21, 2024 10:00 PM"}
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__p9PgR)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yt3Zi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hutk9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__o8Uok
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{"Listed by "}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Keepitreal"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fagtH
                          )}
                        >
                          {"Mar 21, 2024 10:00 PM"}
                        </div>
                      </div>
                    </div>
                  </div>
                </Stack__>
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__fOiVo)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jL2Mp
                )}
              >
                {"More From This Collection"}
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "tabs",
    "unlistModal",
    "buyNftModal",
    "listNftModal",
    "chakraUiNumberInput",
    "chakraUiNumberInputStepper",
    "listPriceInput",
    "confirmListingModal",
    "footer"
  ],
  header: ["header"],
  tabs: ["tabs"],
  unlistModal: ["unlistModal"],
  buyNftModal: ["buyNftModal"],
  listNftModal: [
    "listNftModal",
    "chakraUiNumberInput",
    "chakraUiNumberInputStepper",
    "listPriceInput",
    "confirmListingModal"
  ],
  chakraUiNumberInput: ["chakraUiNumberInput", "chakraUiNumberInputStepper"],
  chakraUiNumberInputStepper: ["chakraUiNumberInputStepper"],
  listPriceInput: ["listPriceInput"],
  confirmListingModal: ["confirmListingModal"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  tabs: typeof AntdTabs;
  unlistModal: typeof AntdModal;
  buyNftModal: typeof AntdModal;
  listNftModal: typeof AntdModal;
  chakraUiNumberInput: typeof NumberInput;
  chakraUiNumberInputStepper: typeof NumberInputStepper;
  listPriceInput: typeof AntdInputNumber;
  confirmListingModal: typeof AntdModal;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNftDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNftDetails__VariantsArgs;
    args?: PlasmicNftDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNftDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNftDetails__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNftDetails__ArgProps,
          internalVariantPropNames: PlasmicNftDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNftDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNftDetails";
  } else {
    func.displayName = `PlasmicNftDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicNftDetails = Object.assign(
  // Top-level PlasmicNftDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    tabs: makeNodeComponent("tabs"),
    unlistModal: makeNodeComponent("unlistModal"),
    buyNftModal: makeNodeComponent("buyNftModal"),
    listNftModal: makeNodeComponent("listNftModal"),
    chakraUiNumberInput: makeNodeComponent("chakraUiNumberInput"),
    chakraUiNumberInputStepper: makeNodeComponent("chakraUiNumberInputStepper"),
    listPriceInput: makeNodeComponent("listPriceInput"),
    confirmListingModal: makeNodeComponent("confirmListingModal"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicNftDetails
    internalVariantProps: PlasmicNftDetails__VariantProps,
    internalArgProps: PlasmicNftDetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNftDetails;
/* prettier-ignore-end */
